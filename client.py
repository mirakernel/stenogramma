#!/usr/bin/env python3
"""
–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
"""

import os
import sys
import argparse
import requests
from crypto_utils import encrypt_data, decrypt_data

def load_env_vars():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ .env —Ñ–∞–π–ª–∞
        if os.path.exists('.env'):
            with open('.env', 'r') as f:
                for line in f:
                    if line.strip() and not line.startswith('#'):
                        key, value = line.strip().split('=', 1)
                        os.environ[key] = value
        
        server_url = os.getenv('SERVER_URL', 'http://localhost:8000')
        secret_endpoint = os.getenv('SECRET_ENDPOINT')
        key_encrypt = os.getenv('KEY_DECRYPT')  # –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —ç—Ç–æ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        key_decrypt = os.getenv('KEY_ENCRYPT')  # –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —ç—Ç–æ –∫–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        
        if not all([secret_endpoint, key_encrypt, key_decrypt]):
            raise ValueError("–ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
        assert secret_endpoint is not None
        assert key_encrypt is not None
        assert key_decrypt is not None
            
        return server_url, secret_endpoint, bytes.fromhex(key_encrypt), bytes.fromhex(key_decrypt)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        print("- SECRET_ENDPOINT")
        print("- KEY_DECRYPT")
        print("- KEY_ENCRYPT")
        print("- SERVER_URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é http://localhost:8000)")
        sys.exit(1)

def encrypt_audio_file(file_path, key):
    """–®–∏—Ñ—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
    try:
        with open(file_path, 'rb') as f:
            audio_data = f.read()
        
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file_path} ({len(audio_data)} –±–∞–π—Ç)")
        encrypted_data = encrypt_data(audio_data, key)
        print(f"üîê –§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω ({len(encrypted_data)} –±–∞–π—Ç)")
        
        return encrypted_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        sys.exit(1)

def send_to_server(encrypted_data, server_url, endpoint, original_filename):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        url = f"{server_url}/{endpoint}"
        print(f"üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {url}")
        
        files = {
            'file': (f"encrypted_{original_filename}", encrypted_data, 'audio/wav')
        }
        
        response = requests.post(url, files=files, timeout=1300)  # 15 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        
        if response.status_code == 200:
            print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–µ—Ä–≤–µ—Ä–æ–º")
            return response.content
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            print(f"–î–µ—Ç–∞–ª–∏: {response.text}")
            sys.exit(1)
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        sys.exit(1)

def decrypt_result(encrypted_result, key):
    """–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        decrypted_data = decrypt_data(encrypted_result, key)
        transcript = decrypted_data.decode('utf-8')
        print("üîì –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω")
        return transcript
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        sys.exit(1)

def save_transcript(transcript, output_file):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ —Ñ–∞–π–ª"""
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(transcript)
        print(f"üíæ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {output_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description='–ö–ª–∏–µ–Ω—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ')
    parser.add_argument('audio_file', help='–ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (.wav)')
    parser.add_argument('-o', '--output', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: transcript.txt)')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(args.audio_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.audio_file}")
        sys.exit(1)
    
    if not args.audio_file.lower().endswith('.wav'):
        print("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .wav")
        sys.exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_file = args.output or 'transcript.txt'
    
    print("üéµ –ö–ª–∏–µ–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    server_url, secret_endpoint, encrypt_key, decrypt_key = load_env_vars()
    
    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    encrypted_audio = encrypt_audio_file(args.audio_file, encrypt_key)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    encrypted_result = send_to_server(
        encrypted_audio, 
        server_url, 
        secret_endpoint, 
        os.path.basename(args.audio_file)
    )
    
    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    transcript = decrypt_result(encrypted_result, decrypt_key)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    save_transcript(transcript, output_file)
    
    print("=" * 50)
    print("üéâ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤")

if __name__ == "__main__":
    main()