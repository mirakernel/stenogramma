#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä production-–≥–æ—Ç–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞ –¥–ª—è Stenogramma
–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–µ –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã
"""

import secrets
import os
import sys
from datetime import datetime

def generate_aes_key():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 32-–±–∞–π—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è AES-256"""
    return secrets.token_bytes(32)

def generate_secret_endpoint():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return secrets.token_urlsafe(48)  # –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

def validate_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É"""
    warnings = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º—ã –Ω–µ –≤ debug —Ä–µ–∂–∏–º–µ
    if os.getenv('DEBUG', '').lower() in ('true', '1', 'on'):
        warnings.append("DEBUG —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è HTTPS
    if not os.getenv('HTTPS_ENABLED', '').lower() in ('true', '1', 'on'):
        warnings.append("HTTPS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    return warnings

def create_production_env():
    """–°–æ–∑–¥–∞–µ—Ç production .env —Ñ–∞–π–ª"""
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
    key_decrypt = generate_aes_key().hex()
    key_encrypt = generate_aes_key().hex()
    secret_endpoint = generate_secret_endpoint()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    timestamp = datetime.now().isoformat()
    
    env_content = f"""# Stenogramma Production Environment Configuration
# Generated: {timestamp}
# CRITICAL: Keep these keys secure and never share them!

# Secret endpoint for audio processing (48 characters)
SECRET_ENDPOINT={secret_endpoint}

# AES-256 encryption keys (64 hex characters each)
KEY_DECRYPT={key_decrypt}
KEY_ENCRYPT={key_encrypt}

# Production settings
ENVIRONMENT=production
DEBUG=false
LOG_LEVEL=INFO

# Security headers
SECURE_HEADERS=true
CORS_ALLOWED_ORIGINS=https://yourdomain.com

# Rate limiting (requests per minute per IP)
RATE_LIMIT=10

# Maximum file size in MB
MAX_FILE_SIZE=200

# Model settings for production
WHISPER_MODEL=large-v3
WHISPER_DEVICE=cuda
WHISPER_COMPUTE_TYPE=float16

# Monitoring
HEALTH_CHECK_ENABLED=true
METRICS_ENABLED=true

# Logging
LOG_FORMAT=json
LOG_FILE=/var/log/stenogramma/app.log

# Backup encryption key (for key rotation)
BACKUP_KEY_DECRYPT={generate_aes_key().hex()}
BACKUP_KEY_ENCRYPT={generate_aes_key().hex()}
"""

    return env_content, key_decrypt, key_encrypt, secret_endpoint

def save_keys_backup(keys_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–ª—é—á–µ–π"""
    backup_content = f"""# Stenogramma Keys Backup
# Generated: {datetime.now().isoformat()}
# Store this file in a secure location!

MAIN_DECRYPT_KEY={keys_data['decrypt']}
MAIN_ENCRYPT_KEY={keys_data['encrypt']}
SECRET_ENDPOINT={keys_data['endpoint']}
BACKUP_DECRYPT_KEY={keys_data['backup_decrypt']}
BACKUP_ENCRYPT_KEY={keys_data['backup_encrypt']}

# Recovery instructions:
# 1. Copy the needed keys to your .env file
# 2. Restart the service
# 3. Update your client configuration
"""
    
    backup_filename = f"keys_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    with open(backup_filename, 'w') as f:
        f.write(backup_content)
    
    return backup_filename

def main():
    print("üîê Production Environment Generator –¥–ª—è Stenogramma")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    warnings = validate_environment()
    if warnings:
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for warning in warnings:
            print(f"   ‚Ä¢ {warning}")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ .env —Ñ–∞–π–ª–∞
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        response = input("–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? –≠—Ç–æ —É–¥–∞–ª–∏—Ç —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–∏! (yes/NO): ").strip().lower()
        if response not in ['yes', 'y']:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            sys.exit(0)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_name = f".env.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        os.rename('.env', backup_name)
        print(f"üìã –°—Ç–∞—Ä—ã–π .env —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {backup_name}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞
    print("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π...")
    env_content, key_decrypt, key_encrypt, secret_endpoint = create_production_env()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    with open('.env', 'w') as f:
        f.write(env_content)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    os.chmod('.env', 0o600)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–ª—é—á–µ–π
    keys_data = {
        'decrypt': key_decrypt,
        'encrypt': key_encrypt,
        'endpoint': secret_endpoint,
        'backup_decrypt': env_content.split('BACKUP_KEY_DECRYPT=')[1].split('\n')[0],
        'backup_encrypt': env_content.split('BACKUP_KEY_ENCRYPT=')[1].split('\n')[0]
    }
    
    backup_file = save_keys_backup(keys_data)
    
    print("‚úÖ Production .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    print()
    print("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
    print(f"   ‚Ä¢ –°–µ–∫—Ä–µ—Ç–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: {len(secret_endpoint)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   ‚Ä¢ –ö–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: 256-bit AES")
    print(f"   ‚Ä¢ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: 256-bit AES")
    print(f"   ‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–ª—é—á–∏: 2x 256-bit AES")
    print()
    print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∫–ª—é—á–µ–π: {backup_file}")
    print(f"üîí –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ .env: 600 (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)")
    print()
    print("üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é:")
    print("=" * 40)
    print("1. –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞:")
    print("   ./build_docker.sh")
    print()
    print("2. –ó–∞–ø—É—Å–∫ production –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:")
    print("   ./run_docker.sh start")
    print()
    print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:")
    print("   ./run_docker.sh status")
    print()
    print("4. –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:")
    print("   ./run_docker.sh logs")
    print()
    print("üîê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–†–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
    print("=" * 40)
    print("‚ùó –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ .env —Ñ–∞–π–ª –ø–æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º")
    print("‚ùó –•—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–ª—é—á–µ–π –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ")
    print("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
    print("‚ùó –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π—Ä–≤–æ–ª –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞")
    print("‚ùó –†–µ–≥—É–ª—è—Ä–Ω–æ —Ä–æ—Ç–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏")
    print("‚ùó –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    print()
    print("üìã –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:")
    print("   –≠–Ω–¥–ø–æ–∏–Ω—Ç API: https://yourdomain.com/" + secret_endpoint)
    print("   –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞): " + key_decrypt)
    print("   –ö–ª—é—á —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞): " + key_encrypt)
    print()
    print("‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()