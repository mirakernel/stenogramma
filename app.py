import os
import secrets
import torch
import logging
from fastapi import FastAPI, UploadFile, HTTPException, Response
from faster_whisper import WhisperModel
from crypto_utils import encrypt_data, decrypt_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
ENDPOINT = os.getenv("SECRET_ENDPOINT", secrets.token_urlsafe(32))

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
KEY_DECRYPT_STR = os.getenv("KEY_DECRYPT")
KEY_ENCRYPT_STR = os.getenv("KEY_ENCRYPT")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
if not KEY_DECRYPT_STR or not KEY_ENCRYPT_STR:
    raise RuntimeError("Encryption keys not configured!")

KEY_DECRYPT = bytes.fromhex(KEY_DECRYPT_STR)  # –î–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤
KEY_ENCRYPT = bytes.fromhex(KEY_ENCRYPT_STR)  # –î–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Whisper —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
model_size = "large-v3"
device = "cuda" if torch.cuda.is_available() else "cpu"
compute_type = "float16" if torch.cuda.is_available() else "int8"

print(f"üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Whisper –º–æ–¥–µ–ª–∏: {model_size}")
print(f"üñ•Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
print(f"‚öôÔ∏è  –¢–∏–ø –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: {compute_type}")

logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Whisper –º–æ–¥–µ–ª–∏: {model_size}, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}, —Ç–∏–ø: {compute_type}")

model = WhisperModel(
    model_size,
    device=device,
    compute_type=compute_type
)

logger.info("–ú–æ–¥–µ–ª—å Whisper —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

@app.post(f"/{ENDPOINT}")
async def process_lecture(file: UploadFile):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {file.filename}")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if not file.filename or not file.filename.endswith('.wav'):
        logger.warning(f"–û—Ç–∫–ª–æ–Ω–µ–Ω —Ñ–∞–π–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞: {file.filename}")
        raise HTTPException(400, "Only .wav files accepted")

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    temp_dir = "temp"
    os.makedirs(temp_dir, exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    temp_filename = os.path.join(temp_dir, f"temp_audio_{secrets.token_urlsafe(8)}.wav")
    logger.debug(f"–°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_filename}")

    try:
        # 2. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ
        logger.info("–ß—Ç–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        encrypted_audio = await file.read()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(encrypted_audio)} –±–∞–π—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        logger.info("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ...")
        decrypted_audio = decrypt_data(encrypted_audio, KEY_DECRYPT)
        logger.info(f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ {len(decrypted_audio)} –±–∞–π—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö")

        # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_filename}")
        with open(temp_filename, "wb") as f:
            f.write(decrypted_audio)
        logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

        # 4. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
        logger.info("–ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")
        segments, _ = model.transcribe(
            temp_filename,
            language="ru",
            beam_size=5,
            vad_filter=True
        )

        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")
        transcript = "\n".join(segment.text for segment in segments)
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ª—É—á–µ–Ω–æ {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞")

        # 5. –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        logger.info("–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        encrypted_result = encrypt_data(transcript.encode('utf-8'), KEY_ENCRYPT)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: {len(encrypted_result)} –±–∞–π—Ç")

        # 6. –û—á–∏—Å—Ç–∫–∞
        if os.path.exists(temp_filename):
            os.remove(temp_filename)
            logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_filename}")

        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return Response(
            content=encrypted_result,
            media_type="application/octet-stream",
            headers={"Content-Disposition": "attachment;filename=encrypted_result.bin"}
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", exc_info=True)
        # –û—á–∏—Å—Ç–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if os.path.exists(temp_filename):
            os.remove(temp_filename)
            logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {temp_filename}")
        raise HTTPException(500, f"Processing error: {str(e)}")

@app.get("/endpoint_info")
async def get_endpoint():
    return {"endpoint": ENDPOINT}
