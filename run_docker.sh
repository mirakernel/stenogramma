#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Stenogramma Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
CONTAINER_NAME="stenogramma"
IMAGE_NAME=""  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
PORT="8000"
ENV_FILE=".env"

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà"
    echo "‚ñà                                                      ‚ñà"
    echo "‚ñà         üöÄ STENOGRAMMA DOCKER RUNNER üöÄ            ‚ñà"
    echo "‚ñà                                                      ‚ñà"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà"
    echo -e "${NC}"
}

show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò] [–ö–û–ú–ê–ù–î–ê]"
    echo
    echo "–ö–û–ú–ê–ù–î–´:"
    echo "  start       –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  stop        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "  restart     –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "  status      –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
    echo "  logs        –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  shell       –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É"
    echo "  remove      –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo
    echo "–û–ü–¶–ò–ò:"
    echo "  -n, --name NAME     –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: stenogramma)"
    echo "  -p, --port PORT     –ü–æ—Ä—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8000)"
    echo "  -e, --env-file FILE –§–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .env)"
    echo "  -i, --image IMAGE   –ò–º—è Docker –æ–±—Ä–∞–∑–∞ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: stenogramma:latest –∏–ª–∏ stenogramma-cpu:latest)"
    echo "  --gpu               –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU –æ–±—Ä–∞–∑"
    echo "  --cpu               –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU –æ–±—Ä–∞–∑"
    echo "  --detach            –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  --interactive       –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫"
    echo "  -h, --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                           # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä GPU/CPU –æ–±—Ä–∞–∑–∞"
    echo "  $0 start --cpu               # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ CPU –æ–±—Ä–∞–∑"
    echo "  $0 --gpu -p 9000 start       # GPU –æ–±—Ä–∞–∑ –Ω–∞ –ø–æ—Ä—Ç—É 9000"
    echo "  $0 logs                      # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  $0 stop                      # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        print_error "Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        exit 1
    fi
}

detect_available_images() {
    print_info "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
    
    GPU_IMAGE_AVAILABLE=false
    CPU_IMAGE_AVAILABLE=false
    
    if docker image inspect "stenogramma:latest" &> /dev/null; then
        GPU_IMAGE_AVAILABLE=true
        print_info "–ù–∞–π–¥–µ–Ω GPU –æ–±—Ä–∞–∑: stenogramma:latest"
    fi
    
    if docker image inspect "stenogramma-cpu:latest" &> /dev/null; then
        CPU_IMAGE_AVAILABLE=true
        print_info "–ù–∞–π–¥–µ–Ω CPU –æ–±—Ä–∞–∑: stenogramma-cpu:latest"
    fi
    
    if [ "$GPU_IMAGE_AVAILABLE" = false ] && [ "$CPU_IMAGE_AVAILABLE" = false ]; then
        print_error "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ Docker –æ–±—Ä–∞–∑–∞!"
        echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É: ./build_docker.sh"
        exit 1
    fi
}

select_image() {
    if [ -n "$IMAGE_NAME" ]; then
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –æ–±—Ä–∞–∑ –≤—Ä—É—á–Ω—É—é
        if ! docker image inspect "$IMAGE_NAME" &> /dev/null; then
            print_error "–£–∫–∞–∑–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑ '$IMAGE_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
            exit 1
        fi
        print_info "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –æ–±—Ä–∞–∑: $IMAGE_NAME"
        return
    fi
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    if [ "$FORCE_GPU" = true ]; then
        if [ "$GPU_IMAGE_AVAILABLE" = true ]; then
            IMAGE_NAME="stenogramma:latest"
            USE_GPU=true
            print_success "–í—ã–±—Ä–∞–Ω GPU –æ–±—Ä–∞–∑ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)"
        else
            print_error "GPU –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω! –í—ã–ø–æ–ª–Ω–∏—Ç–µ: ./build_docker.sh --gpu"
            exit 1
        fi
    elif [ "$FORCE_CPU" = true ]; then
        if [ "$CPU_IMAGE_AVAILABLE" = true ]; then
            IMAGE_NAME="stenogramma-cpu:latest"
            USE_GPU=false
            print_success "–í—ã–±—Ä–∞–Ω CPU –æ–±—Ä–∞–∑ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)"
        else
            print_error "CPU –æ–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω! –í—ã–ø–æ–ª–Ω–∏—Ç–µ: ./build_docker.sh --cpu"
            exit 1
        fi
    else
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
        if [ "$GPU_IMAGE_AVAILABLE" = true ] && check_gpu_support; then
            IMAGE_NAME="stenogramma:latest"
            USE_GPU=true
            print_success "–í—ã–±—Ä–∞–Ω GPU –æ–±—Ä–∞–∑ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
        elif [ "$CPU_IMAGE_AVAILABLE" = true ]; then
            IMAGE_NAME="stenogramma-cpu:latest"
            USE_GPU=false
            print_success "–í—ã–±—Ä–∞–Ω CPU –æ–±—Ä–∞–∑ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
        elif [ "$GPU_IMAGE_AVAILABLE" = true ]; then
            IMAGE_NAME="stenogramma:latest"
            USE_GPU=false
            print_warning "GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU –æ–±—Ä–∞–∑ –±–µ–∑ --gpus"
        else
            print_error "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤!"
            exit 1
        fi
    fi
}

check_image() {
    if ! docker image inspect "$IMAGE_NAME" &> /dev/null; then
        print_error "Docker –æ–±—Ä–∞–∑ '$IMAGE_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        echo "–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–±–æ—Ä–∫—É: ./build_docker.sh"
        exit 1
    fi
}

check_env_file() {
    if [ ! -f "$ENV_FILE" ]; then
        print_error "–§–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è '$ENV_FILE' –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        echo "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --env-file –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞"
        echo "–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ .env:"
        echo "SECRET_ENDPOINT=your_secret_endpoint_32chars"
        echo "KEY_DECRYPT=your_64_char_hex_key"
        echo "KEY_ENCRYPT=your_64_char_hex_key"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if ! grep -q "SECRET_ENDPOINT=" "$ENV_FILE" || \
       ! grep -q "KEY_DECRYPT=" "$ENV_FILE" || \
       ! grep -q "KEY_ENCRYPT=" "$ENV_FILE"; then
        print_error "–í —Ñ–∞–π–ª–µ '$ENV_FILE' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ!"
        print_info "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–ª—é—á–∏: python3 generate_keys.py"
        exit 1
    fi
}

check_gpu_support() {
    if command -v nvidia-smi &> /dev/null; then
        if timeout 10 docker run --rm --gpus all nvidia/cuda:12.9.0-base-ubuntu22.04 nvidia-smi &> /dev/null 2>&1; then
            return 0
        else
            return 1
        fi
    else
        return 1
    fi
}

start_container() {
    print_info "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ '$CONTAINER_NAME'..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
        print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$CONTAINER_NAME' —É–∂–µ –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
    if docker ps -aq -f name="$CONTAINER_NAME" | grep -q .; then
        print_info "–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
        docker rm "$CONTAINER_NAME" > /dev/null
    fi
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
    DOCKER_CMD="docker run"
    
    if [ "$INTERACTIVE" = false ]; then
        DOCKER_CMD="$DOCKER_CMD -d"
    else
        DOCKER_CMD="$DOCKER_CMD -it"
    fi
    
    DOCKER_CMD="$DOCKER_CMD --name $CONTAINER_NAME"
    DOCKER_CMD="$DOCKER_CMD --restart unless-stopped"
    DOCKER_CMD="$DOCKER_CMD -p $PORT:8000"
    DOCKER_CMD="$DOCKER_CMD --env-file $ENV_FILE"
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ GPU –æ–±—Ä–∞–∑ –∏ GPU –¥–æ—Å—Ç—É–ø–µ–Ω
    if [ "$USE_GPU" = true ] && [[ "$IMAGE_NAME" == *"stenogramma:latest"* ]]; then
        DOCKER_CMD="$DOCKER_CMD --gpus all"
        print_info "–í–∫–ª—é—á–µ–Ω–∞ GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
    elif [[ "$IMAGE_NAME" == *"stenogramma-cpu"* ]]; then
        print_info "–ó–∞–ø—É—Å–∫ –≤ CPU —Ä–µ–∂–∏–º–µ"
    fi
    
    DOCKER_CMD="$DOCKER_CMD $IMAGE_NAME"
    
    print_info "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞: $DOCKER_CMD"
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    if eval "$DOCKER_CMD"; then
        if [ "$INTERACTIVE" = false ]; then
            print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$CONTAINER_NAME' –∑–∞–ø—É—â–µ–Ω –≤ background —Ä–µ–∂–∏–º–µ"
            print_info "–ü–æ—Ä—Ç: http://localhost:$PORT"
            print_info "–õ–æ–≥–∏: $0 logs"
            print_info "–°—Ç–∞—Ç—É—Å: $0 status"
        fi
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
        exit 1
    fi
}

stop_container() {
    print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ '$CONTAINER_NAME'..."
    
    if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
        docker stop "$CONTAINER_NAME"
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$CONTAINER_NAME' –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
}

restart_container() {
    stop_container
    sleep 2
    start_container
}

show_status() {
    print_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ '$CONTAINER_NAME':"
    
    if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
        echo -e "${GREEN}üü¢ –ó–∞–ø—É—â–µ–Ω${NC}"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Image}}" -f name="$CONTAINER_NAME"
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±—Ä–∞–∑–∞
        RUNNING_IMAGE=$(docker inspect "$CONTAINER_NAME" --format='{{.Config.Image}}' 2>/dev/null || echo "unknown")
        if [[ "$RUNNING_IMAGE" == *"cpu"* ]]; then
            echo -e "${YELLOW}üñ•Ô∏è  –†–µ–∂–∏–º: CPU${NC}"
        else
            echo -e "${GREEN}üéÆ –†–µ–∂–∏–º: GPU${NC}"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
        if curl -s -f "http://localhost:$PORT/endpoint_info" > /dev/null 2>&1; then
            echo -e "${GREEN}üåê –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:$PORT${NC}"
        else
            echo -e "${YELLOW}‚è≥ –°–µ—Ä–≤–∏—Å –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...${NC}"
        fi
    elif docker ps -aq -f name="$CONTAINER_NAME" | grep -q .; then
        echo -e "${RED}üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Image}}" -f name="$CONTAINER_NAME"
    else
        echo -e "${YELLOW}‚ö™ –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    fi
}

show_logs() {
    if docker ps -aq -f name="$CONTAINER_NAME" | grep -q .; then
        docker logs -f "$CONTAINER_NAME"
    else
        print_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$CONTAINER_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
}

connect_shell() {
    if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
        docker exec -it "$CONTAINER_NAME" /bin/bash
    else
        print_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$CONTAINER_NAME' –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        exit 1
    fi
}

remove_container() {
    print_info "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ '$CONTAINER_NAME'..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
    if docker ps -q -f name="$CONTAINER_NAME" | grep -q .; then
        docker stop "$CONTAINER_NAME"
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ
    if docker ps -aq -f name="$CONTAINER_NAME" | grep -q .; then
        docker rm "$CONTAINER_NAME"
        print_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–¥–∞–ª–µ–Ω"
    else
        print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$CONTAINER_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
USE_GPU=true
FORCE_GPU=false
FORCE_CPU=false
INTERACTIVE=false
COMMAND="start"

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -n|--name)
            CONTAINER_NAME="$2"
            shift 2
            ;;
        -p|--port)
            PORT="$2"
            shift 2
            ;;
        -e|--env-file)
            ENV_FILE="$2"
            shift 2
            ;;
        -i|--image)
            IMAGE_NAME="$2"
            shift 2
            ;;
        --gpu)
            FORCE_GPU=true
            shift
            ;;
        --cpu)
            FORCE_CPU=true
            shift
            ;;
        --detach)
            INTERACTIVE=false
            shift
            ;;
        --interactive)
            INTERACTIVE=true
            shift
            ;;
        start|stop|restart|status|logs|shell|remove)
            COMMAND="$1"
            shift
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    print_header
    
    check_docker
    
    case $COMMAND in
        start)
            detect_available_images
            select_image
            check_image
            check_env_file
            start_container
            ;;
        stop)
            stop_container
            ;;
        restart)
            detect_available_images
            select_image
            check_image
            check_env_file
            restart_container
            ;;
        status)
            show_status
            ;;
        logs)
            show_logs
            ;;
        shell)
            connect_shell
            ;;
        remove)
            remove_container
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $COMMAND"
            show_help
            exit 1
            ;;
    esac
}

main