#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ç–µ—Å—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import os
import secrets
from crypto_utils import encrypt_data, decrypt_data

def test_basic_encryption():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è/—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = "Hello, World! –≠—Ç–æ —Ç–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.".encode('utf-8')
    test_key = secrets.token_bytes(32)  # 256-bit –∫–ª—é—á
    
    try:
        # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
        encrypted = encrypt_data(test_data, test_key)
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_data)} –±–∞–π—Ç")
        print(f"   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(encrypted)} –±–∞–π—Ç")
        
        # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
        decrypted = decrypt_data(encrypted, test_key)
        print(f"   –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(decrypted)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        if decrypted == test_data:
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_different_keys():
    """–¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏"""
    print("\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏...")
    
    test_data = "Secret message".encode('utf-8')
    key1 = secrets.token_bytes(32)
    key2 = secrets.token_bytes(32)
    
    try:
        # –®–∏—Ñ—Ä—É–µ–º –æ–¥–Ω–∏–º –∫–ª—é—á–æ–º
        encrypted = encrypt_data(test_data, key1)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–º –∫–ª—é—á–æ–º
        try:
            decrypt_data(encrypted, key2)
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º")
            return False
        except:
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_large_data():
    """–¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä–æ–º ~1MB
    test_data = ("A" * (1024 * 1024)).encode('utf-8')
    test_key = secrets.token_bytes(32)
    
    try:
        encrypted = encrypt_data(test_data, test_key)
        decrypted = decrypt_data(encrypted, test_key)
        
        if decrypted == test_data:
            print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(test_data)} –±–∞–π—Ç")
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_empty_data():
    """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüì≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    test_data = "".encode('utf-8')
    test_key = secrets.token_bytes(32)
    
    try:
        encrypted = encrypt_data(test_data, test_key)
        decrypted = decrypt_data(encrypted, test_key)
        
        if decrypted == test_data:
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_unicode_data():
    """–¢–µ—Å—Ç —Å Unicode –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Unicode –¥–∞–Ω–Ω—ã—Ö...")
    
    test_text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! üåç Hello, World! ‰Ω†Â•Ω‰∏ñÁïåÔºÅ"
    test_data = test_text.encode('utf-8')
    test_key = secrets.token_bytes(32)
    
    try:
        encrypted = encrypt_data(test_data, test_key)
        decrypted = decrypt_data(encrypted, test_key)
        decrypted_text = decrypted.decode('utf-8')
        
        if decrypted_text == test_text:
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: Unicode –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def main():
    print("üß™ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ç–µ—Å—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 50)
    
    tests = [
        test_basic_encryption,
        test_different_keys,
        test_large_data,
        test_empty_data,
        test_unicode_data
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é crypto_utils.")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)