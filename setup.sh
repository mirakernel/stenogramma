#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ Stenogramma
# –í–µ—Ä—Å–∏—è: 1.0.0

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà"
    echo "‚ñà                                                      ‚ñà"
    echo "‚ñà           üéµ STENOGRAMMA SETUP SCRIPT üéµ            ‚ñà"
    echo "‚ñà                                                      ‚ñà"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà"
    echo -e "${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
check_os() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã..."
    
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        OS="linux"
        print_success "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Linux —Å–∏—Å—Ç–µ–º–∞"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macos"
        print_success "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ macOS —Å–∏—Å—Ç–µ–º–∞"
    else
        print_error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OSTYPE"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
check_python() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python..."
    
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
        print_success "Python –Ω–∞–π–¥–µ–Ω: –≤–µ—Ä—Å–∏—è $PYTHON_VERSION"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python (–º–∏–Ω–∏–º—É–º 3.8)
        PYTHON_MAJOR=$(echo $PYTHON_VERSION | cut -d'.' -f1)
        PYTHON_MINOR=$(echo $PYTHON_VERSION | cut -d'.' -f2)
        
        if [ "$PYTHON_MAJOR" -eq 3 ] && [ "$PYTHON_MINOR" -ge 8 ]; then
            print_success "–í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥—è—â–∞—è (>=3.8)"
        else
            print_error "–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $PYTHON_VERSION"
            exit 1
        fi
    else
        print_error "Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8 –∏–ª–∏ –≤—ã—à–µ"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
check_pip() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ pip..."
    
    if command -v pip3 &> /dev/null; then
        print_success "pip3 –Ω–∞–π–¥–µ–Ω"
    else
        print_warning "pip3 –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
        if [[ "$OS" == "linux" ]]; then
            sudo apt-get update && sudo apt-get install -y python3-pip
        elif [[ "$OS" == "macos" ]]; then
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3 get-pip.py
            rm get-pip.py
        fi
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_system_deps() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if [[ "$OS" == "linux" ]]; then
        print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
        sudo apt-get update
        
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
        sudo apt-get install -y \
            build-essential \
            python3-dev \
            ffmpeg \
            curl \
            git
            
        print_success "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
    elif [[ "$OS" == "macos" ]]; then
        if command -v brew &> /dev/null; then
            print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Homebrew..."
            brew install ffmpeg
            print_success "FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Homebrew"
        else
            print_warning "Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –≤—Ä—É—á–Ω—É—é"
        fi
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
create_venv() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ ! -d "venv" ]; then
        python3 -m venv venv
        print_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
    else
        print_warning "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
    
    print_info "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    source venv/bin/activate
    
    print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip..."
    pip install --upgrade pip
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_python_deps() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if [ -f "requirements.txt" ]; then
        pip install -r requirements.txt
        print_success "–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_error "–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    if [ -f "requirements-client.txt" ]; then
        pip install -r requirements-client.txt
        print_success "–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_warning "–§–∞–π–ª requirements-client.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
generate_keys() {
    print_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π..."
    
    if [ -f ".env" ]; then
        print_warning "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        read -p "–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π"
            return
        fi
    fi
    
    python3 generate_keys.py
    print_success "–ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .env"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p temp
    mkdir -p logs
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
check_gpu() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ GPU..."
    
    if command -v nvidia-smi &> /dev/null; then
        GPU_INFO=$(nvidia-smi --query-gpu=name --format=csv,noheader,nounits | head -1)
        print_success "NVIDIA GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω: $GPU_INFO"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA
        if python3 -c "import torch; print('CUDA –¥–æ—Å—Ç—É–ø–µ–Ω:', torch.cuda.is_available())" 2>/dev/null; then
            print_success "CUDA –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        else
            print_warning "CUDA –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU (–º–µ–¥–ª–µ–Ω–Ω–µ–µ)"
        fi
    else
        print_warning "NVIDIA GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
test_installation() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    if python3 test_crypto.py; then
        print_success "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç"
    else
        print_error "–û—à–∏–±–∫–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"
        exit 1
    fi
    
    print_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
setup_docker() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    
    if command -v docker &> /dev/null; then
        print_success "Docker –Ω–∞–π–¥–µ–Ω"
        
        if command -v docker-compose &> /dev/null; then
            print_success "Docker Compose –Ω–∞–π–¥–µ–Ω"
            
            read -p "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å Docker –æ–±—Ä–∞–∑? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                print_info "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞..."
                docker build -t stenogramma .
                print_success "Docker –æ–±—Ä–∞–∑ –ø–æ—Å—Ç—Ä–æ–µ–Ω"
            fi
        else
            print_warning "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
    else
        print_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Docker —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ."
    fi
}

# –í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
print_instructions() {
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo
    echo -e "${GREEN}üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É:${NC}"
    echo
    echo "1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:"
    echo "   source venv/bin/activate"
    echo
    echo "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:"
    echo "   uvicorn app:app --host 0.0.0.0 --port 8000"
    echo
    echo "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:"
    echo "   python3 client.py your_audio.wav -o transcript.txt"
    echo
    echo -e "${BLUE}üê≥ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker:${NC}"
    echo "   docker-compose up -d"
    echo
    echo -e "${YELLOW}üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo "   python3 health_check.py    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo "   python3 generate_keys.py   # –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π"
    echo "   python3 test_crypto.py     # –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"
    echo
    echo -e "${RED}‚ö†Ô∏è  –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:${NC}"
    echo "   ‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ñ–∞–π–ª .env —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º"
    echo "   ‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∫–ª—é—á–µ–π"
    echo "   ‚Ä¢ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS"
    echo "   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .wav —Ñ–∞–π–ª—ã"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    print_info "–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Stenogramma..."
    echo
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    check_os
    check_python
    check_pip
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_system_deps
    create_venv
    install_python_deps
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    generate_keys
    create_directories
    check_gpu
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_installation
    
    # Docker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    setup_docker
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    echo
    print_instructions
    
    print_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! üéâ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç root
if [ "$EUID" -eq 0 ]; then
    print_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root!"
    print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. sudo –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
if [ ! -f "app.py" ] || [ ! -f "crypto_utils.py" ]; then
    print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ Stenogramma"
    exit 1
fi

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main